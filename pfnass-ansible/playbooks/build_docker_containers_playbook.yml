---
- name: Build All Docker Containers
  hosts: pfnass
  vars_files:
    - "./vars/docker_containers"
  tasks:
    - name: Run Postgres Database Container
      community.docker.docker_container:
        name: postgres
        image: postgres:latest
        networks:
          - name: "{{ proxy_network }}"
        restart_policy: unless-stopped
        ports:
          "{{ postgres_db_ports }}"
        env:
          POSTGRES_PASSWORD: "{{ postgres_password }}"
          POSTGRES_USER: "{{ postgres_user }}"
        volumes:
          - "{{ postgres_volume_path }}/data:/var/lib/postgresql/data"
          - "{{ postgres_volume_path }}/init_multi_db.sh:/docker-entrypoint-initdb.d/init_multi_db.sh"
      tags:
        - docker
        - container
        - postgres

    - name: Start Code-Server Container
      community.docker.docker_container:
        name: code-server
        image: lscr.io/linuxserver/code-server:latest
        keep_volumes: true
        networks:
          - name: "{{ proxy_network }}"
        pull: false
        restart_policy: unless-stopped
        env:
          PUID: "{{ puid }}"
          PGID: "{{ pgid }}"
          TZ: America/Chicago
          DEFAULT_WORKSPACE: /config/workspace #optional
        volumes:
          - /volume1/docker/code-server/config:/config
          - /volume1/docker:/config/workspace
        ports:
          "{{ code_server_ports }}"
        labels:
          traefik.enable: "true"
          traefik.http.routers.codeserver.rule: Host(`codeserver.pfnass.online`)
          traefik.http.routers.codeserver.entrypoints: websecure
          traefik.http.routers.codeserver.tls.certresolver: myresolver
      tags:
        - docker
        - container
        - code

    - name: Start VaultWarden Container
      community.docker.docker_container:
        name: vaultwarden
        image: vaultwarden/server:latest
        keep_volumes: true
        networks:
          - name: "{{ proxy_network }}"
        pull: false
        restart_policy: unless-stopped
        env:
          # ADMIN_TOKEN: "{{ ADMIN_TOKEN }}"
          # WEBSOCKET_ENABLED: "true"
          SIGNUPS_ALLOWED: "false"
          DOMAIN: "{{ vw_domain }}"
        volumes:
          - "{{ vw_path }}:/data:rw"
        ports:
          "{{ vw_port }}"
        labels:
          traefik.enable: "true"
          traefik.http.routers.warden.rule: Host(`warden.pfnass.online`)
          traefik.http.routers.warden.entrypoints: websecure
          traefik.http.routers.warden.tls.certresolver: myresolver
      tags:
        - docker
        - container
        - vault

    - name: Run Mealie Container
      community.docker.docker_container:
        name: mealie
        image: ghcr.io/mealie-recipes/mealie:latest
        keep_volumes: true
        networks:
          - name: "{{ proxy_network }}"
        pull: false
        restart_policy: unless-stopped
        env:
          USER_UID: "{{ puid }}"
          USER_GID: "{{ pgid }}"
          ALLOW_SIGNUP: "false"
          TZ: America/Chicago
          BASE_URL: "{{ base_url }}"
          # Database Settings
          DB_ENGINE: postgres
          POSTGRES_USER: pfnass
          POSTGRES_PASSWORD: "{{ db_pass }}"
          POSTGRES_SERVER: "192.168.1.189"
          POSTGRES_PORT: "5433"
          POSTGRES_DB: mealie
        volumes:
          - "{{ mealie_volume_path }}/data:/app/data/"
        ports:
          - "{{ mealie_ports }}"
        labels:
          traefik.enable: "true"
          traefik.http.routers.mealie.rule: Host(`mealie.pfnass.online`)
          traefik.http.routers.mealie.entrypoints: websecure
          traefik.http.routers.mealie.tls.certresolver: myresolver
      tags:
        - docker
        - container
        - mealie

    - name: Start Jellyfin Container
      community.docker.docker_container:
        name: jellyfin
        image: jellyfin/jellyfin
        keep_volumes: true
        networks:
          - name: "{{ proxy_network }}"
        pull: false
        restart_policy: unless-stopped
        env:
          TZ: America/Chicago
          PUID: "{{ puid }}"
          PGID: "{{ pgid }}"
        volumes:
          - "{{ jellyfin_path }}/config:/config"
          - "{{ jellyfin_path }}/cache:/cache"
          - "{{ jellyfin_media }}:/Media/main"
          - "{{ jellyfin_media_alt }}:/Media/alt"
        ports:
          "{{ jellyfin_port }}"
        devices:
          - /dev/dri/renderD128:/dev/dri/renderD128
          - /dev/dri/card0:/dev/dri/card0
        labels:
          traefik.enable: "true"
          traefik.http.routers.jellyfin.rule: Host(`jellyfin.pfnass.online`)
          traefik.http.routers.jellyfin.entrypoints: websecure
          traefik.http.routers.jellyfin.tls.certresolver: myresolver
      tags:
        - docker
        - container
        - jellyfin

    - name: Start Dashy Container
      community.docker.docker_container:
        name: dashy
        image: lissy93/dashy
        keep_volumes: true
        networks:
          - name: "{{ proxy_network }}"
        pull: false
        restart_policy: unless-stopped
        env:
          NODE_ENV: production
        volumes:
          - "{{ dashy_path }}/config.yml:/app/user-data/conf.yml"
        ports:
          "{{ dashy_port }}"
        # healthcheck:new_user_password
        #   test: ['CMD', 'node', '/app/services/healthcheck']
        #   interval: 1m30s
        #   timeout: 10s
        #   retries: 3
        #   start_period: 40s
        labels:
          traefik.enable: "true"
          traefik.http.routers.dash.rule: Host(`dash.pfnass.online`)
          traefik.http.routers.dash.entrypoints: websecure
          traefik.http.routers.dash.tls.certresolver: myresolver
      tags:
        - docker
        - container
        - dashy

    - name: Start PaperlessNGX Container
      community.docker.docker_container:
        name: paperless_ngx
        image: lscr.io/linuxserver/paperless-ngx:latest
        keep_volumes: true
        networks:
          - name: "{{ proxy_network }}"
        pull: true
        restart_policy: unless-stopped
        env:
          TZ: America/Chicago
          PUID: "{{ puid }}"
          PGID: "{{ pgid }}"
          PAPERLESS_URL: "https://paperless.pfnass.online"
          # PAPERLESS_GMAIL_OAUTH_CLIENT_ID: 99939319622-a1qsqnt1gq271i0d31tu9thmakct6c88.apps.googleusercontent.com
          # PAPERLESS_GMAIL_OAUTH_CLIENT_SECRET: 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
        volumes:
          - "{{ paperless_path }}/config:/config"
          - "{{ paperless_path }}/data:/data"
        ports:
          "{{ paperless_port }}"
        labels:
          traefik.enable: "true"
          traefik.http.routers.paperless.rule: Host(`paperless.pfnass.online`)
          traefik.http.routers.paperless.entrypoints: websecure
          traefik.http.routers.paperless.tls.certresolver: myresolver
      tags:
        - docker
        - container
        - paperless
  become: true
